<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.StuMajorMapper">
    <resultMap type="StuMajor" id="StuMajorResult">
        <id     property="majorId"     column="major_id" />
        <result property="academy"     column="academy" />
        <result property="type"        column="type" />
        <result property="parentId"    column="parent_id" />
    </resultMap>

    <resultMap type="MajorScoreDTO" id="MajorScoreResult">
        <id     property="majorId"     column="major_id" />
        <result property="academicScore"     column="academic_score" />
        <result property="studentId"        column="student_id" />
        <result property="ranking"        column="ranking" />
    </resultMap>
    <resultMap type="MajorScoreDTO" id="MajorScoreResult2">
        <id     property="studentId"     column="student_id" />
        <result property="majorId"        column="major_id" />
    </resultMap>
    <resultMap type="MajorStatistic" id="MajorStatisticResult">
        <id property="subMajorId" column="sub_major_id"/>
        <result property="subMajorName" column="sub_major_name"/>
        <result property="intraClassCount" column="intra_class_count"/>
        <result property="intraDomainCount" column="intra_domain_count"/>
    </resultMap>

    <resultMap type="MajorStatisticDTO" id="MajorStatisticDTOResult">
        <id property="majorId" column="major_id"/>
        <result property="majorName" column="major_name"/>
        <result property="gradeA" column="grade_A"/>
        <result property="gradeB" column="grade_B"/>
        <result property="gradeC" column="grade_C"/>
        <result property="studentNum" column="student_num"/>
    </resultMap>

    <select id="selectByAcademyAndType" resultMap="StuMajorResult">
        SELECT *
        FROM stu_major
        WHERE type= #{type} AND major_id IN (
            SELECT major_id
            FROM stu_major
            WHERE major_name = #{major}
              AND academy = #{academy}
              AND type = #{type}
        )
           OR parent_id IN (
            SELECT major_id
            FROM stu_major
            WHERE major_name = #{major}
              AND academy = #{academy}
              AND type = #{type}
        );
    </select>

    <select id="selectChildrenByParentId" resultMap="StuMajorResult">
        SELECT * FROM stu_major
        WHERE parent_id = #{parentId}
    </select>

<select id="selectMajorStatisticGradesNum" resultMap="MajorStatisticDTOResult">
    SELECT
        sr.major_id,
        si.system_major AS major_name,
        COUNT(CASE WHEN si.grade_level = 'A' THEN 1 END) AS grade_A,
        COUNT(CASE WHEN si.grade_level = 'B' THEN 1 END) AS grade_B,
        COUNT(CASE WHEN si.grade_level = 'C' THEN 1 END) AS grade_C,
        COUNT(si.student_id) AS student_num
    FROM stu_major sm
             LEFT JOIN stu_info si
                       ON sm.major_name =
                          CASE
                              WHEN si.divert_form IN ('可类内任选，并转专业','可类内任选，不能转专业')
                                  THEN si.major
                              WHEN si.divert_form = '可域内任选，并转专业'
                                  THEN si.original_system_major
                              END
             Left JOIN stu_major sr on sr.parent_id=sm.major_id AND si.system_major=sr.major_name
    WHERE sm.major_id = #{majorId}
    GROUP BY system_major,sr.major_id;

</select>
    <select id="selectMajorStatistics" resultMap="MajorStatisticResult">
        SELECT
            sm.major_id AS sub_major_id,
            sm.major_name AS sub_major_name,
            SUM(
                    CASE WHEN si_intra_class.student_id IS NOT NULL THEN 1 ELSE 0 END
            ) AS intra_class_count,
            SUM(
                    CASE WHEN si_intra_domain.student_id IS NOT NULL THEN 1 ELSE 0 END
            ) AS intra_domain_count
        FROM stu_major sm
                 LEFT JOIN stu_info si_intra_class
                           ON sm.major_name = si_intra_class.system_major
                               AND si_intra_class.divert_form IN ('可类内任选，并转专业', '可类内任选，不能转专业')
                 LEFT JOIN stu_info si_intra_domain
                           ON sm.major_name = si_intra_domain.original_system_major
                               AND si_intra_domain.divert_form = '可域内任选，并转专业'
        WHERE sm.parent_id = #{parentId}
        GROUP BY sm.major_id, sm.major_name
    </select>

    <update id="updateRankedStudents">
        UPDATE stu_info si
        JOIN (
        SELECT
        student_id,
        major_id,
        DENSE_RANK() OVER (
        PARTITION BY major_id
        ORDER BY
        CASE WHEN academic_score IS NULL THEN 1 ELSE 0 END,
        academic_score DESC
        ) AS ranking,
        CASE
        WHEN (PERCENT_RANK() OVER (
        PARTITION BY major_id
        ORDER BY academic_score DESC
        )) &lt;= 0.2 THEN 'A'
        WHEN (PERCENT_RANK() OVER (
        PARTITION BY major_id
        ORDER BY academic_score DESC
        )) &lt;= 0.6 THEN 'B'
        ELSE 'C'
        END AS grade_level
        FROM (
        SELECT
        s1.student_id,
        s1.academic_score,
        s3.major_id  <!-- 专业ID来自stu_major表 -->
        FROM stu_ability_score s1
        JOIN stu_info s2 ON s1.student_id = s2.student_id
        JOIN stu_major s3 ON s3.major_name =
        CASE
        WHEN s2.divert_form IN ('可类内任选，并转专业','可类内任选，不能转专业')
        THEN s2.major
        WHEN s2.divert_form = '可域内任选，并转专业'
        THEN s2.original_system_major
        END
        WHERE s3.major_id IN
        <foreach collection="majorId" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        ) filtered_data
        ) tr
        ON si.student_id = tr.student_id
        SET
        si.ranking = tr.ranking,
        si.grade_level = tr.grade_level
        <!-- 移除错误的major_id条件 -->
    </update>

    <update id="updateStuMajor" parameterType="StuMajor">
        update stu_major
        <trim prefix="SET" suffixOverrides=",">
            <if test="studentNum != null">student_num = #{studentNum},</if>
            <if test="gradeA != null">grade_A = #{gradeA},</if>
            <if test="gradeB != null">grade_B = #{gradeB},</if>
            <if test="gradeC != null">grade_C = #{gradeC},</if>
        </trim>
        where major_id = #{majorId}
    </update>
    <update id="batchUpdateMajors">
        <foreach collection="list" item="item" separator=";">
            UPDATE stu_major
            <trim prefix="SET" suffixOverrides=",">
                <if test="item.studentNum != null">
                    student_num = #{item.studentNum},
                </if>
                <if test="item.gradeA != null">
                    grade_A = #{item.gradeA},
                </if>
                <if test="item.gradeB != null">
                    grade_B = #{item.gradeB},
                </if>
                <if test="item.gradeC != null">
                    grade_C = #{item.gradeC},
                </if>
            </trim>
            WHERE major_id = #{item.majorId}
        </foreach>
    </update>

    <select id="selectDistinctMajorIdsByStudents">
        SELECT DISTINCT
        major_id
        FROM stu_info si
            JOIN stu_major sm
                ON sm.major_name =
        CASE
        WHEN si.divert_form IN ('可类内任选，并转专业','可类内任选，不能转专业')
        THEN si.major
        WHEN si.divert_form = '可域内任选，并转专业'
        THEN si.original_system_major
        END
        WHERE si.student_id IN
        <foreach item="id" collection="studentIds" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
</mapper>