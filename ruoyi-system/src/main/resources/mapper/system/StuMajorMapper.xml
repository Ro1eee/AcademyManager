<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.StuMajorMapper">
    <resultMap type="StuMajor" id="StuMajorResult">
        <id property="majorId" column="major_id"/>
        <result property="academy" column="academy"/>
        <result property="type" column="type"/>
        <result property="parentId" column="parent_id"/>
    </resultMap>

    <resultMap type="MajorScoreDTO" id="MajorScoreResult">
        <id property="majorId" column="major_id"/>
        <result property="academicScore" column="academic_score"/>
        <result property="studentId" column="student_id"/>
        <result property="ranking" column="ranking"/>
    </resultMap>
    <resultMap type="MajorScoreDTO" id="MajorScoreResult2">
        <id property="studentId" column="student_id"/>
        <result property="majorId" column="major_id"/>
    </resultMap>
    <resultMap type="MajorStatistic" id="MajorStatisticResult">
        <result property="majorName" column="major_name"/>
        <result property="academy" column="academy"/>
        <result property="studentNum" column="student_num"/>
        <result property="type" column="type"/>
    </resultMap>

    <resultMap type="MajorStatisticDTO" id="MajorStatisticDTOResult">
        <id property="majorId" column="major_id"/>
        <result property="majorName" column="major_name"/>
        <result property="gradeA" column="grade_A"/>
        <result property="gradeB" column="grade_B"/>
        <result property="gradeC" column="grade_C"/>
        <result property="studentNum" column="student_num"/>
    </resultMap>

    <select id="getMajorNum" resultMap="MajorStatisticResult">
        SELECT
            major_name,
            academy,
            COALESCE(SUM(student_num), 0) AS student_num,
            CASE
                WHEN type = 1 THEN 3
                WHEN type IN (2,4) THEN 2
                WHEN type = 3 THEN 4
                WHEN type IN (5,6) THEN 1
                END AS type
        FROM stu_major
        WHERE parent_id IS NOT NULL
        GROUP BY
            major_name,
            academy,
            CASE
                WHEN type = 1 THEN 3
                WHEN type IN (2,4) THEN 2
                WHEN type = 3 THEN 4
                WHEN type IN (5,6) THEN 1
                END;
    </select>

    <select id="selectByAcademyAndType" resultMap="StuMajorResult">
        SELECT *
        FROM stu_major
        WHERE type = #{type} AND major_id IN (SELECT major_id
                                              FROM stu_major
                                              WHERE major_name = #{major}
                                                AND academy = #{academy}
                                                AND type = #{type})
           OR parent_id IN (SELECT major_id
                            FROM stu_major
                            WHERE major_name = #{major}
                              AND academy = #{academy}
                              AND type = #{type});
    </select>


    <select id="selectMajorStatisticGradesNum" resultMap="MajorStatisticDTOResult">
        SELECT child.major_id,
               child.major_name,
               COUNT(CASE WHEN info.grade_level = 'A' THEN 1 END) AS grade_A,
               COUNT(CASE WHEN info.grade_level = 'B' THEN 1 END) AS grade_B,
               COUNT(CASE WHEN info.grade_level = 'C' THEN 1 END) AS grade_C,
               COUNT(info.student_id)                             AS student_num
        FROM stu_major parent
                 RIGHT JOIN stu_info info
                            ON parent.major_name =
                               CASE
                                   WHEN info.divert_form IN ('可类内任选，并转专业', '可类内任选，不能转专业')
                                       THEN info.major
                                   WHEN info.divert_form IN ('可域内任选，并转专业', '仅可转专业', '不可变更专业')
                                       THEN info.original_system_major
                                   ELSE NULL
                                   END
                                AND info.divert_form = #{divertForm}
                 RIGHT JOIN stu_major child
                            ON child.parent_id = parent.major_id
                                AND info.system_major = child.major_name
        WHERE parent.parent_id IS NULL
          AND child.parent_id = #{parentId}
        GROUP BY child.major_id,
                 child.major_name;
    </select>
    <select id="getMajorStatisticGradesNum" resultMap="MajorStatisticDTOResult">
        SELECT major_name,
               SUM(grade_A)     AS grade_A,
               SUM(grade_B)     AS grade_B,
               SUM(grade_C)     AS grade_C,
               SUM(student_num) AS student_num

        FROM stu_major s1
        WHERE major_name in (SELECT major_name
                             FROM stu_major s2
                             WHERE parent_id = #{parentId})
          AND academy = (SELECT academy
                         FROM stu_major s2
                         WHERE major_id = #{parentId})
        GROUP BY major_name
    </select>
    <update id="updateRankedStudents">
        UPDATE stu_info si
        JOIN (
        SELECT
        student_id,
        academy,
        ROW_NUMBER() OVER (
        PARTITION BY academy
        ORDER BY
        CASE WHEN academic_score IS NULL THEN 1 ELSE 0 END,
        academic_score DESC
        ) AS ranking,
        CASE
        WHEN PERCENT_RANK() OVER (PARTITION BY academy ORDER BY academic_score DESC) &lt;= 0.2 THEN 'A'
        WHEN PERCENT_RANK() OVER (PARTITION BY academy ORDER BY academic_score DESC) &lt;= 0.6 THEN 'B'
        ELSE 'C'
        END AS grade_level
        FROM (
        SELECT
        s1.student_id,
        s1.academic_score,
        s1.academy
        FROM stu_ability_score s1
        JOIN stu_info s2 ON s1.student_id = s2.student_id
        WHERE s1.academy IN
        <foreach collection="academy" item="academy" open="(" separator="," close=")">
            #{academy}
        </foreach>
        ) filtered_data
        ) tr ON si.student_id = tr.student_id
        SET
        si.ranking = tr.ranking,
        si.grade_level = tr.grade_level;
    </update>

    <update id="updateStuMajor" parameterType="StuMajor">
        update stu_major
        <trim prefix="SET" suffixOverrides=",">
            <if test="studentNum != null">student_num = #{studentNum},</if>
            <if test="gradeA != null">grade_A = #{gradeA},</if>
            <if test="gradeB != null">grade_B = #{gradeB},</if>
            <if test="gradeC != null">grade_C = #{gradeC},</if>
        </trim>
        where major_id = #{majorId}
    </update>
    <update id="batchUpdateMajors">
        <foreach collection="list" item="item" separator=";">
            UPDATE stu_major
            <trim prefix="SET" suffixOverrides=",">
                <if test="item.studentNum != null">
                    student_num = #{item.studentNum},
                </if>
                <if test="item.gradeA != null">
                    grade_A = #{item.gradeA},
                </if>
                <if test="item.gradeB != null">
                    grade_B = #{item.gradeB},
                </if>
                <if test="item.gradeC != null">
                    grade_C = #{item.gradeC},
                </if>
            </trim>
            WHERE major_id = #{item.majorId}
        </foreach>
    </update>

    <select id="selectDistinctMajorIdsByStudents">
        SELECT DISTINCT
        sm.academy
        FROM stu_info si
        JOIN stu_major sm
        ON sm.major_name =
        CASE
        WHEN si.divert_form IN ('可类内任选，并转专业','可类内任选，不能转专业')
        THEN si.major
        WHEN si.divert_form IN ('可域内任选，并转专业','仅可转专业','不可变更专业')
        THEN si.original_system_major
        END
        WHERE si.student_id IN
        <foreach item="id" collection="studentIds" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
</mapper>